"""Middleware are callables (functions, classes) that works with every request before it is processed by views. And also with every response before returning it.

- Middleware takes each request that comes to applications
- It can then do something to that request or run code
- Then it passes the request to be processed by the rest of the application (by individual views)
- Takes the response generated by the application
- Can do something to that response or run code
- Finally returns the response.

Background tasks run _after_ middleware.
"""

from starlette.middleware.base import BaseHTTPMiddleware
from starlette.middleware.sessions import SessionMiddleware as StarletteSessionMiddleware
from starlette.requests import Request
from starlette.responses import Response


class UserDict(dict):
    """Dictionary subclass that allows attribute access."""
    
    def __getattr__(self, name):
        try:
            return self[name]
        except KeyError:
            raise AttributeError(f"'UserDict' object has no attribute '{name}'")
    
    def __setattr__(self, name, value):
        self[name] = value


class User:
    """User object that provides a clean API for user data and authentication."""
    
    def __init__(self, **kwargs):
        self._data = UserDict(kwargs)
        # Set attributes from kwargs without triggering __setattr__ yet
        super().__setattr__('_data', self._data)
        for key, value in kwargs.items():
            super().__setattr__(key, value)
    
    def __setattr__(self, name, value):
        # Store in both instance and _data for session persistence
        if name.startswith('_'):
            super().__setattr__(name, value)
        else:
            super().__setattr__(name, value)
            if hasattr(self, '_data'):
                self._data[name] = value
    
    def __getattr__(self, name):
        # Fall back to _data if attribute not found
        if hasattr(self, '_data') and name in self._data:
            return self._data[name]
        raise AttributeError(f"'User' object has no attribute '{name}'")
    
    def is_authenticated(self):
        """Check if the user is authenticated."""
        return getattr(self, 'authenticated', False)
    
    def has_permission(self, permission):
        """Check if the user has a specific permission."""
        permissions = getattr(self, 'permissions', [])
        return permission in permissions
    
    def update(self, **kwargs):
        """Update user data."""
        for key, value in kwargs.items():
            setattr(self, key, value)
    
    def to_dict(self):
        """Convert user data to dictionary for session storage."""
        return dict(self._data)


class UserMiddleware(BaseHTTPMiddleware):
    """Middleware that adds a user object to request.user, preserved via session.

    Args:
        use_session: Whether to persist user data via session. Defaults to True.

    Example:

        import air

        app = air.Air()
        app.add_middleware(air.SessionMiddleware, secret_key="your-secret-key")
        app.add_middleware(air.UserMiddleware)

        @app.page
        async def index(request: air.Request):
            # Access user data from request.state.user
            request.state.user.login_time = 12345
            request.state.user.authenticated = True
            is_auth = request.state.user.is_authenticated()
            return air.layouts.mvpcss(
                air.H1(f"Authenticated: {is_auth}"),
                air.P(f"Login time: {request.state.user.login_time}"),
                air.P("User data is preserved across requests via session"),
            )
    """

    def __init__(self, app, use_session: bool = True):
        super().__init__(app)
        self.use_session = use_session

    async def dispatch(self, request: Request, call_next) -> Response:
        # Load user data from session or initialize empty
        user_data = {}
        if self.use_session and hasattr(request, 'session'):
            user_data = request.session.get("user", {})
        
        # Create user object from session data
        request.state.user = User(**user_data)
        
        # Call the next middleware or route handler
        response = await call_next(request)
        
        # Save user data back to session if enabled and available
        if self.use_session and hasattr(request, 'session'):
            request.session["user"] = request.state.user.to_dict()
        
        return response


class SessionMiddleware(StarletteSessionMiddleware):
    """Used to manage sessions.

    Example:

        import air
        from time import time

        app = air.Air()
        app.add_middleware(air.SessionMiddleware, secret_key="change-me")

        @app.page
        async def index(request: air.Request):
            if "first-visited" not in request.session:
                request.session["first-visited"] = time()
            return air.layouts.mvpcss(
                air.H1(request.session.get("first-visited")),
                air.P("Refresh the page and the timestamp won't change"),
                air.P(air.A("Reset the time stamp", href="/reset")),
            )

        @app.page
        async def reset(request: air.Request):
            request.session.pop("first-visited")
            return air.responses.RedirectResponse("/")
    """

    pass
