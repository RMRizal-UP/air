[project]
name = "air"
version = "0.20.0"
description = "The new web framework that breathes fresh air into Python web development. Built with FastAPI, Starlette, and Pydantic."
authors = [
    { name = "Audrey M. Roy Greenfeld", email = "audrey@feldroy.com" },
    { name = "Daniel Roy Greenfeld", email = "daniel@feldroy.com" }
]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">= 3.10"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.urls]
Homepage = "https://github.com/feldroy/air"
Docs = "https://airdocs.fastapicloud.dev"
Issues = "https://github.com/feldroy/air/issues"

[project.scripts]
"air" = "air.cli:app"

# region dependencies
[project.dependencies]
fastapi = ">=0.116.1"
jinja2 = ">=3.1.6"
python-multipart = ">=0.0.20"

# Runtime extras you want users to install from PyPI
[project.optional-dependencies]
# Make `air[standard]` install FastAPI’s own “standard” extras,
# so *users* can do: uv pip install "air[standard]".
standard = [
    # Re-install FastAPI with its “standard” extra.
    "fastapi[standard]>=0.116.1",
]

[dependency-groups]
# Groups are for contributors; install with: uv sync --group NAME
# Developer-only deps (dev/test/docs) under [dependency-groups],
# so uv sync can install them for contributors.
# (Groups are not published to PyPI (meaning: they’re not visible to end users).)
dev = [
    # Justfile tasks
    "rust-just>=1.42.3",
]
test = [
    # Measure how much of the code is covered by tests
    "coverage>=7.8.2",
    # For the test client
    "httpx>=0.28.1",
    # Used with debugging
    "ipdb>=0.13.13",
    # Test runner
    "pytest>=8.4.0",
    # Linting and formatting
    "ruff>=0.11.13",
    # Justfile tasks
    "rust-just>=1.42.3",
    # for checking types
    "ty>=0.0.1a16",
    # Types for the markdown library
    "types-Markdown>=3.8.0",
    # Lets you run full example apps
    "uvicorn>=0.34.0",
    # Fix common misspellings in text files
    "codespell>=2.4.1",
]
docs = [
    "mkdocs-material",
    "mkdocstrings[python]",
    "mkdocs-autorefs>=1.4.2",
]
# endregion dependencies

[tool.mypy]
exclude = "^build/"

# -------- pytest: make tests import from src/ --------
[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]

[tool.coverage.run]
omit = [
    "tests/*",
]

# region uv
[tool.uv]
package = true
# Keep defaults explicit; dev, test groups installs on `uv sync`
default-groups = ["dev", "test"]

[tool.uv.dependency-groups]
# Dev tools require modern Python while the library supports older versions
dev = { requires-python = ">=3.13" }
# Speed up rebuilds of the editable install
cache-keys = [
  { file = "pyproject.toml" },
  { file = "uv.lock" },
  { dir = "src" },
  { dir = "tests" },
  { file = "README.md" },
]

# -------- uv build backend (fast and strict) --------
[build-system]
requires = ["uv_build>=0.8.7,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
# src is default, but we state it for clarity
module-root = "src"
# Your single top-level package under src
module-name = "air"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true

[tool.uv.sources]
# Tells uv to use the local workspace air instead of PyPI.
air = { workspace = true }
# endregion uv

# region ruff
[tool.ruff]
# Keep file discovery identical whether you pass "." or not
respect-gitignore = true  # default, shown for clarity
force-exclude = true      # apply excludes even for explicit paths like "."

src = ["src"]
line-length = 120
indent-width = 4
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    ".github",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    ".cursor",
    ".idea",
    "__pypackages__",
    "build",
    "dist",
    "site-packages",
]

[tool.ruff.format]
indent-style = "space"   # match EditorConfig
line-ending = "lf"       # enforce LF newlines
quote-style = "double"   # keep quotes in sync with flake8-quotes
# Docstring code formatting
docstring-code-format = true # format Python code blocks in docstrings
docstring-code-line-length = "dynamic" # int | "dynamic" (used only if above is true)
# Trailing-comma behavior (Black's “magic comma”)
skip-magic-trailing-comma = false # leave multi-line when trailing comma present
# Formatter-only file excludes (extra to top-level exclude/extend-exclude)
exclude = []
# Opt into preview (experimental) formatting style
preview = false

[tool.ruff.lint]
select = [
    # prefix
    "ERA",    # https://docs.astral.sh/ruff/rules/#eradicate-era
    "FAST",   # https://docs.astral.sh/ruff/rules/#fastapi-fast
    "ANN",    # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "ASYNC",  # https://docs.astral.sh/ruff/rules/#flake8-async-async
    "S",      # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "BLE",    # https://docs.astral.sh/ruff/rules/#flake8-blind-except-ble
    "FBT",    # https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
    "B",      # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "A",      # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "C4",     # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "EM",     # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "FIX",    # https://docs.astral.sh/ruff/rules/#flake8-fixme-fix
    "ISC",    # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "INP",    # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "PIE",    # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "T20",    # https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "PT",     # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "RSE",    # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RET",    # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "SIM",    # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SLOT",   # https://docs.astral.sh/ruff/rules/#flake8-slots-slot
    "ARG",    # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "PTH",    # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "FLY",    # https://docs.astral.sh/ruff/rules/#flynt-fly
    "I",      # https://docs.astral.sh/ruff/rules/#isort-i
    "C90",    # https://docs.astral.sh/ruff/rules/#mccabe-c90
    "N",      # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "PERF",   # https://docs.astral.sh/ruff/rules/#perflint-perf
    "E", "W", # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "DOC",    # https://docs.astral.sh/ruff/rules/#pydoclint-doc
    "D",      # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "D",      # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "PGH",    # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
    "PL",     # https://docs.astral.sh/ruff/rules/#pylint-pl
    "UP",     # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "FURB",   # https://docs.astral.sh/ruff/rules/#refurb-furb
    "RUF",    # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "TRY",    # https://docs.astral.sh/ruff/rules/#tryceratops-try
    # Full rule code
    "ICN003", # https://docs.astral.sh/ruff/rules/banned-import-from
    "TC004",  # https://docs.astral.sh/ruff/rules/runtime-import-in-type-checking-block
    "TC005",  # https://docs.astral.sh/ruff/rules/empty-type-checking-block
    "TC008",  # https://docs.astral.sh/ruff/rules/quoted-type-alias
    "TC010",  # https://docs.astral.sh/ruff/rules/runtime-string-union
]
ignore = [
    "D100", # ignore missing docstring in module
    "D102", # ignore missing docstring in public method
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D107", # ignore missing docstring in __init__ methods
    "D206", # docstring-tab-indentation (formatter handles indentation)
    "D300", # triple-single-quotes (formatter enforces double quotes)
    "ANN101", "ANN102", # skip self/cls annotation rules
]

[tool.ruff.lint.flake8-import-conventions]
# Declare the banned `from` imports.
banned-from = ["air"]

[tool.ruff.lint.isort]
combine-as-imports = true     # group aliases coming from the same module
force-wrap-aliases = true     # keep the multi-line, parenthesised layout
# Help Ruff classify your own package as first-party (very important for stable sorting)
known-first-party = ["air"]
# Extra safety: mark imports from the same package as first-party when inside it
detect-same-package = true
# Keep the standard section order; set explicitly for clarity
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
# Keep type-based ordering (default, but set explicitly)
order-by-type = true
# Do NOT set these (formatter conflicts):
# force-single-line, lines-after-imports, lines-between-types, split-on-trailing-comma

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10  # set the C901 threshold explicitly

[tool.ruff.lint.flake8-type-checking]
# Do NOT auto-quote annotations; prefer normal annotations.
quote-annotations = false
# These must exist at runtime (annotations are read/used), so don't gate their imports
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
]
runtime-evaluated-decorators = [
    "dataclasses.dataclass",
    "pydantic.validate_call",
    "fastapi.FastAPI.get",
]
# Modules that are always safe to import (never gate)
exempt-modules = ["typing", "typing_extensions"]
# endregion ruff

# region ty
[tool.ty.src]
# Lock what gets checked so "ty check" and "ty check ." act the same
include = ["src", "tests"] # keep discovery stable
# Keep Ty aligned with .gitignore and friends (default = true; shown for clarity).
respect-ignore-files = true

[tool.ty.environment]
# Optional: make first-party resolution stable
root = ["./src", "."]

[tool.ty.terminal]
# Fail the run on any warning.
error-on-warning = true
# Short, readable output; switch to "full" when debugging.
output-format = "concise"

# Promote every non-error rule to error (strict).
[tool.ty.rules]
deprecated = "error"
invalid-ignore-comment = "error"
possibly-unbound-attribute = "error"
possibly-unbound-implicit-call = "error"
possibly-unbound-import = "error"
redundant-cast = "error"
undefined-reveal = "error"
unknown-rule = "error"
unresolved-global = "error"
unsupported-base = "error"
division-by-zero = "error"
possibly-unresolved-reference = "error"
unused-ignore-comment = "error"

# Tests often import optional dev deps or use dynamic patterns.
[[tool.ty.overrides]]
include = ["tests/**", "**/test_*.py", "**/*_test.py"]
[tool.ty.overrides.rules]
unresolved-import               = "warn"
possibly-unresolved-reference   = "warn"
# endregion ty

[tool.codespell]
# Ref: https://github.com/codespell-project/codespell#using-a-config-file
skip = '.git*,*.svg,*.lock,*.css,*.yaml'
check-hidden = true
# Ignore "formatting" like **L**anguage
ignore-regex = '\*\*[A-Z]\*\*[a-z]+\b'
ignore-words-list = 'asend,aci'
